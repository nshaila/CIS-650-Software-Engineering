{
  "name": "discover-tcp-transport",
  "version": "4.0.1",
  "description": "Node discovery TCP transport",
  "scripts": {
    "test": "node scripts/test.js"
  },
  "main": "index.js",
  "devDependencies": {
    "nodeunit": "0.8.1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:tristanls/node-discover-tcp-transport.git"
  },
  "keywords": [
    "discover",
    "discovery",
    "tcp",
    "tcp transport"
  ],
  "contributors": [
    {
      "name": "Tristan Slominski",
      "email": "tristan.slominski@gmail.com"
    },
    {
      "name": "Mike de Boer",
      "email": "info@mikedeboer.nl"
    },
    {
      "name": "Eli Skeggs",
      "email": "skeggse@gmail.com"
    }
  ],
  "license": "MIT",
  "readme": "# discover-tcp-transport\n\n_Stability: 1 - [Experimental](https://github.com/tristanls/stability-index#stability-1---experimental)_\n\n[![NPM version](https://badge.fury.io/js/discover-tcp-transport.png)](http://npmjs.org/package/discover-tcp-transport)\n\nTCP transport for [Discover](https://github.com/tristanls/discover), a distributed master-less node discovery mechanism that enables locating any entity (server, worker, drone, actor) based on node id.\n\n## Contributors\n\n[@tristanls](https://github.com/tristanls), [@mikedeboer](https://github.com/mikedeboer), [@skeggse](https://github.com/skeggse)\n\n## Installation\n\n    npm install discover-tcp-transport\n\n## Tests\n\n    npm test\n\n## Overview\n\nDiscover TCP transport implements the Discover transport protocol consisting of a stripped down version of the Kademlia DHT protocol, PING and FIND-NODE. The TCP transport reports a node as unreachable if a connection cannot be established with it.\n\n_NOTE: Unreachability of nodes depends on the transport. For example, other transports (like TLS transport) could use other criteria (like invalid certificate) for reporting unreachable nodes._\n\n_**WARNING**: Using TCP transport is meant primarily for development in a development environment. TCP transport exists because it is a low hanging fruit. It is most likely that it should be replaced with DTLS transport in production (maybe TLS if DTLS is not viable). There may also be a use-case for using UDP transport if communicating nodes are on a VPN/VPC. Only if UDP on a VPN/VPC seems not viable, should TCP transport be considered._\n\n## Documentation\n\n### TcpTransport\n\n**Public API**\n  * [TcpTransport.listen(options, callback)](#tcptransportlistenoptions-callback)\n  * [new TcpTransport(options)](#new-tcptransportoptions)\n  * [tcpTransport.close(callback)](#tcptransportclosecallback)\n  * [tcpTransport.findNode(contact, nodeId, sender)](#tcptransportfindnodecontact-nodeid-sender)\n  * [tcpTransport.listen(callback)](#tcptransportlistencallback)\n  * [tcpTransport.ping(contact, sender)](#tcptransportpingcontact-sender)\n  * [tcpTransport.setTransportInfo(contact)](#tcptransportsettransportinfocontact)\n  * [Event 'findNode'](#event-findnode)\n  * [Event 'node'](#event-node)\n  * [Event 'ping'](#event-ping)\n  * [Event 'reached'](#event-reached)\n  * [Event 'unreachable'](#event-unreachable)\n\n#### TcpTransport.listen(options, callback)\n\n  * `options`: See `new TcpTransport(options)` `options`.\n  * `callback`: See `tcpTransport.listen(callback)` `callback`.\n  * Return: _Object_ An instance of TcpTransport with server running.\n\nCreates new TCP transport and starts the server.\n\n#### new TcpTransport(options)\n\n  * `options`:\n    * `host`: _String_ _(Default: 'localhost')_\n    * `port`: _Integer_ _(Default: 6742)_ A port value of zero will assign a random port.\n\nCreates a new TCP transport.\n\n#### tcpTransport.close(callback)\n\n  * `callback`: _Function_ _(Default: undefined)_ Optional callback to call once the server is stopped.\n\nStops the server from listening to requests from other nodes.\n\n#### tcpTransport.findNode(contact, nodeId, sender)\n\n  * `contact`: _Object_ The node to contact with request to find `nodeId`.\n    * `id`: _String (base64)_ Base64 encoded contact node id.\n    * `transport`: _Object_ TCP transport data.\n      * `host`: _String_ IP address to connect to.\n      * `port`: _Integer_ Port to connect to.\n  * `nodeId`: _String (base64)_ Base64 encoded string representation of the node id to find.\n  * `sender`: _Object_ The node making the request\n    * `id`: _String (base64)_ Base64 encoded sender node id.\n    * `data`: _Any_ Sender node data.\n    * `transport`: _Object_ TCP transport data.\n      * `host`: _String_ Host to connect to.\n      * `port`: _Integer_ Port to connect to.\n\nIssues a FIND-NODE request to the `contact`. In other words, sends FIND-NODE request to the contact at `contact.host` and `contact.port` using TCP. The transport will emit `node` event when a response is processed (or times out).\n\n#### tcpTransport.listen(callback)\n\n  * `callback`: _Function_ _(Default: undefined)_ Optional callback to call once the server is up.\n\nStarts the server to listen to requests from other nodes.\n\n#### tcpTransport.ping(contact, sender)\n\n  * `contact`: _Object_ Contact to ping.\n    * `id`: _String (base64)_ Base64 encoded contact node id.\n    * `transport`: _Object_ TCP transport data.\n      * `host`: _String_ Host to connect to.\n      * `port`: _Integer_ Port to connect to.\n  * `sender`: _Object_ The contact making the request.\n    * `id`: _String (base64)_ Base64 encoded sender node id.\n    * `data`: _Any_ Sender node data.\n    * `transport`: _Object_ TCP transport data.\n      * `host`: _String_ Host of the sender.\n      * `port`: _Integer_ Port of the sender.\n\nIssues a PING request to the `contact`. In other words, pings the contact at the `contact.transport.host` and `contact.transport.port` using TCP. The transport will emit `unreachable` event if the contact is deemed to be unreachable, or `reached` event otherwise.\n\n#### tcpTransport.rpc(contact, payload, callback)\n\n_**CAUTION: reserved for internal use**_\n\n  * `contact`: _Object_ Contact to ping.\n    * `id`: _String (base64)_ Base64 encoded contact node id.\n    * `transport`: _Object_ TCP transport data.\n      * `host`: _String_ Host to connect to.\n      * `port`: _Integer_ Port to connect to.\n  * `payload`: _String_ or _Object_ Payload to send on the wire. If an _Object_ is provided, it will be `JSON.stringify()`'ed.\n  * `callback`: _Function_ Callback to call with an error or response.\n\nAn internal common implementation for `tcpTransport.findNode(...)` and `tcpTransport.ping(...)`.\n\n#### tcpTransport.setTransportInfo(contact)\n\n  * `contact`: _Object_ A contact.\n  * Return: _Object_ `contact` with `contact.transport` populated.\n\nSets `contact.transport` to TCP transport configured values. For example:\n\n```javascript\nvar contact = {id: 'id', data: 'data'};\nvar tcpTransport = new TcpTransport({host: 'foo.com', port: 8888});\ncontact = tcpTransport.setTransportInfo(contact);\nassert.ok(contact.transport.host === 'foo.com'); // true\nassert.ok(contact.transport.port === 8888); // true\n```\n\n#### Event: `findNode`\n\n  * `nodeId`: _String (base64)_ Base64 encoded string representation of the node id to find.\n  * `sender`: _Object_ The contact making the request.\n    * `id`: _String (base64)_ Base64 encoded sender node id.\n    * `data`: _Any_ Sender node data.\n    * `transport`: _Object_ TCP transport data.\n      * `host`: _String_ Host of the sender.\n      * `port`: _Integer_ Port of the sender.\n  * `callback`: _Function_ The callback to call with the result of processing the FIND-NODE request.\n    * `error`: _Error_ An error, if any.\n    * `response`: _Object_ or _Array_ The response to FIND-NODE request.\n\nEmitted when another node issues a FIND-NODE request to this node.\n\n```javascript\nvar TcpTransport = require('discover-tcp-transport');\nvar tcpTransport = new TcpTransport();\ntcpTransport.on('findNode', function (nodeId, sender, callback) {\n    // ... find closestNodes to the desired nodeId\n    return callback(null, closestNodes);\n});\n```\n\nIn the above example `closestNodes` is an Array of contacts that are closest known to the desired `nodeId`.\n\nIf the node handling the request itself contains the `nodeId`, then it sends only itself back.\n\n```javascript\nvar TcpTransport = require('discover-tcp-transport');\nvar tcpTransport = new TcpTransport();\ntcpTransport.on('findNode', function (nodeId, sender, callback) {\n    // ... this node knows the node with nodeId or is itself node with nodeId\n    return callback(null, nodeWithNodeId);\n});\n```\n\nIn the above example, `nodeWithNodeId` is not an array, but an individual `contact` representing the answer to `findNode` query.\n\n#### Event: `node`\n\n  * `error`: _Error_ An error, if one occurred.\n  * `contact`: _Object_ The node that FIND-NODE request was sent to.\n  * `nodeId`: _String (base64)_ The original base64 encoded node id requested to be found.\n  * `response`: _Object_ or _Array_ The response from the queried `contact`.\n\nIf `error` occurs, the transport encountered an error when issuing the `findNode` request to the `contact`. `contact` and `nodeId` will also be provided in case of an error. `response` is undefined if an `error` occurs.\n\n`response` will be an Array if the `contact` does not contain the `nodeId` requested. In this case `response` will be a `contact` list of nodes closer to the `nodeId` that the queried node is aware of. The usual step is to next query the returned contacts with the FIND-NODE request.\n\n`response` will be an Object if the `contact` contains the `nodeId`. In other words, the node has been found.\n\n#### Event: `ping`\n\n  * `nodeId`: _String (base64)_ Base64 encoded string representation of the node id being pinged.\n  * `sender`: _Object_ The contact making the request.\n    * `id`: _String (base64)_ Base64 encoded sender node id.\n    * `data`: _Any_ Sender node data.\n    * `transport`: _Object_ TCP transport data.\n      * `host`: _String_ Host of the sender.\n      * `port`: _Integer_ Port of the sender.\n  * `callback`: _Function_ The callback to call with the result of processing the PING request.\n    * `error`: _Error_ An error, if any.\n    * `response`: _Object_ The response to PING request, if any.\n\nEmitted when another node issues a PING request to this node.\n\n```javascript\nvar TcpTransport = require('discover-tcp-transport');\nvar tcpTransport = new TcpTransport();\ntcpTransport.on('ping', function (nodeId, sender, callback) {\n    // ... verify that we have the exact node specified by nodeId\n    return callback(null, contact);\n});\n```\n\nIn the above example `contact` is an Object representing the answer to `ping` query.\n\nIf the exact node specified by nodeId does not exist, an error shall be returned as shown below:\n\n```javascript\nvar TcpTransport = require('discover-tcp-transport');\nvar tcpTransport = new TcpTransport();\ntcpTransport.on('ping', function (nodeId, sender, callback) {\n    // ...we don't have the nodeId specified\n    return callback(true);\n});\n```\n\n#### Event: `reached`\n\n  * `contact`: _Object_ The contact that was reached when pinged.\n    * `id`: _String (base64)_ Base64 encoded contact node id.\n    * `data`: _Any_ Data included with the contact.\n    * `transport`: _Object_ TCP transport data.\n      * `host`: _String_ Host of reached contact.\n      * `port`: _Integer_ port of reached contact.\n\nEmitted when a previously pinged `contact` is deemed reachable by the transport.\n\n#### Event: `unreachable`\n\n  * `contact`: _Object_ The contact that was unreachable when pinged.\n    * `id`: _String (base64)_ Base64 encoded contact node id.\n    * `transport`: _Object_ TCP transport data.\n      * `host`: _String_ Host of unreachable contact.\n      * `port`: _Integer_ port of unreachable contact.\n\nEmitted when a previously pinged `contact` is deemed unreachable by the transport.\n\n## Wire Protocol\n\nWire protocol for TCP transport is simple one-line \\r\\n terminated ASCII.\n\n### FIND-NODE\n\n    {\"request\":{\"findNode\":\"Zm9v\"},\"sender\":{\"id\":\"YmF6\",\"data\":\"some data\",\"transport\":{\"host\":\"127.0.0.1\",\"port\":6742}}}\\r\\n\n\nFIND-NODE request consists of a JSON object with base64 encoded node id and a sender followed by \\r\\n as shown above.\n\n#### Object Response\n\n    {\"id\":\"Zm9v\",\"data\":\"some data\",\"transport\":{\"host\":\"127.0.0.1\",\"port\":6742}}\\r\\n\n\nAn Object response is JSON representation of the contact followed by \\r\\n.\n\n#### Array Response\n\n    [{\"id\":\"YmFy\",\"data\":\"some data\",\"transport\":{\"host\":\"192.168.0.1\",\"port\":6742}},{\"id\":\"YmF6\",\"data\":\"some data\",\"transport\":{\"host\":\"192.168.0.2\",\"port\":6742}}]\\r\\n\n\nAn Array response is JSON representation of an array of closest contacts followed by \\r\\n.\n\n### PING\n\n    {\"request\":{\"ping\":\"Zm9v\"},\"sender\":{\"id\":\"YmF6\",\"data\":\"some data\",\"transport\":{\"host\":\"127.0.0.1\",\"port\":6742}}}\\r\\n\n\nPING request consists of a JSON object with base64 encoded node id and a sender followed by \\r\\n as shown above.\n\n#### Object Response\n\n    {\"id\":\"Zm9v\",\"data\":\"some data\",\"transport\":{\"host\":\"127.0.0.1\",\"port\":6742}}\\r\\n\n\nAn Object response is JSON representation of the pinged contact followed by \\r\\n.\n\n#### Failure Responses\n\nClosing the connection without an object response or inability to connect in the first place indicates a PING failure.\n",
  "readmeFilename": "README.md",
  "_id": "discover-tcp-transport@4.0.1",
  "dist": {
    "shasum": "08c864bcc71bef6eddd9eb9bec545973b0124ce3"
  },
  "_from": "discover-tcp-transport@4.0.1",
  "_resolved": "https://registry.npmjs.org/discover-tcp-transport/-/discover-tcp-transport-4.0.1.tgz"
}
