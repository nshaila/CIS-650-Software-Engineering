{
  "name": "node-discover",
  "description": "Automatically discover your nodejs instances with built-in support for automatic single master and capability advertising.",
  "version": "0.0.14",
  "author": {
    "name": "Dan VerWeire"
  },
  "homepage": "http://github.com/wankdanker/node-discover",
  "repository": {
    "type": "git",
    "url": "git://github.com/wankdanker/node-discover.git"
  },
  "main": "discover",
  "devDependencies": {
    "eventemitter2": "0.4.x",
    "optimist": "~0.6.0",
    "dnode": "~1.0.5"
  },
  "engines": {
    "node": ">=0.4.1 <0.5.0 || >=0.6.9"
  },
  "readme": "node-discover\n=============\n\nAutomatic and decentralized discovery and monitoring of nodejs instances with \nbuilt in support for a variable number of master processes, service advertising\nand channel messaging.\n\nWhy?\n====\n\nSo, you have a whole bunch of node processes running but you have no way within\neach process to determine where the other processes are or what they can do. \nThis module aims to make discovery of new processes as simple as possible. \nAdditionally, what if you want one process to be in charge of a cluster of \nprocesses? This module also has automatic master process selection.\n\nCompatibility\n=============\n\nThis module uses broadcast and multicast features from node's dgram module. All \nrequired features of the dgram module are implemented in the following versions of node\n\n\t- v0.4.x\n\t- v0.6.9+\n\n\nExample\n=======\n\nBe sure to look in the examples folder, especially at the [distributed event\nemitter](https://github.com/wankdanker/node-discover/blob/master/examples/deventemitter.js)\n\n\n\tvar Discover = require('node-discover');\n\n\tvar d = Discover();\n\n\td.on(\"promotion\", function () {\n\t\t/* \n\t\t * Launch things this master process should do.\n\t\t * \n\t\t * For example:\n\t\t *\t- Monitior your redis servers and handle failover by issuing slaveof\n\t\t *    commands then notify other node instances to use the new master\n\t\t *\t- Make sure there are a certain number of nodes in the cluster and \n\t\t *    launch new ones if there are not enough\n\t\t *\t- whatever\n\t\t * \n\t\t */\n\t\t \n\t\tconsole.log(\"I was promoted to a master.\");\n\t});\n\n\td.on(\"demotion\", function () {\n\t\t/*\n\t\t * End all master specific functions or whatever you might like. \n\t\t *\n\t\t */\n\t\t\n\t\tconsole.log(\"I was demoted from being a master.\");\n\t});\n\n\td.on(\"added\", function (obj) {\n\t\tconsole.log(\"A new node has been added.\");\n\t});\n\n\td.on(\"removed\", function (obj) {\n\t\tconsole.log(\"A node has been removed.\");\n\t});\n\n\td.on(\"master\", function (obj) {\n\t\t/*\n\t\t * A new master process has been selected\n\t\t * \n\t\t * Things we might want to do:\n\t\t * \t- Review what the new master is advertising use its services\n\t\t *\t- Kill all connections to the old master\n\t\t */\n\t\t \n\t\tconsole.log(\"A new master is in control\");\n\t});\n\nInstalling\n==========\n\n### npm\n\n\tnpm install node-discover\n\n### git\n\n\tgit clone git://github.com/wankdanker/node-discover.git\n\n\nAPI\n===\n\nConstructor\n-----------\n\n```js\nDiscover({\n\thelloInterval\t: How often to broadcast a hello packet in milliseconds; Default: 1000\n\tcheckInterval\t: How often to to check for missing nodes in milliseconds; Default: 2000\n\tnodeTimeout\t: Consider a node dead if not seen in this many milliseconds; Default: 2000\n\tmasterTimeout\t: Consider a master node dead if not seen in this many milliseconds; Default: 2000\n\taddress\t\t: Address to bind to; Default: '0.0.0.0'\n\tport\t\t: Port on which to bind and communicate with other node-discover processes; Default: 12345\n\tbroadcast\t: Broadcast address if using broadcast; Default: '255.255.255.255'\n\tmulticast\t: Multicast address if using multicast; Default: null (don't use multicast, use broadcast)\n\tmulitcastTTL\t: Multicast TTL for when using multicast; Default: 1\n\tkey\t\t: Encryption key if your broadcast packets should be encrypted; Default: null (that means no encryption);\n\tmastersRequired\t: The count of master processes that should always be available,\n\tweight\t\t: A number used to determine the preference for a specific process to become master. Higher numbers win. Default : Math.random()\n}, callback);\n```\n\nAttributes\n-----------\n\n* nodes\n\n\nMethods\n-----------\n\n### promote()\nPromote the instance to master.\n\nThis causes the old master to demote.\n\t\n\tvar Discover = require('node-discover');\n\tvar d = Discover();\n\t\n\td.promote();\n\n### demote(permanent=false)\nDemote the instance from being a master. Optionally pass true to demote to specify that this\nnode should not automatically become master again.\n\nThis causes another node to become master\n\n\tvar Discover = require('node-discover');\n\tvar d = Discover();\n\t\n\td.demote(); //this node is still eligible to become a master node.\n\t\n\t//or\n\t\n\td.demote(true); //this node is no longer eligible to become a master node.\n\n### join(channel, messageCallback)\nJoin a channel on which to receive messages/objects\n\t\n\tvar Discover = require('node-discover');\n\tvar d = Discover();\n\t\n\t//Pass the channel and the callback function for handling received data from that channel\n\tvar success = d.join(\"config-updates\", function (data) {\n\t\tif (data.redisMaster) {\n\t\t\t//connect to the new redis master\n\t\t}\n\t});\n\t\n\tif (!success) {\n\t\t//could not join that channel; probably because it is reserved\n\t}\n\t\n#### Reserved channels\n* promotion\n* demotion\n* added\n* removed\n* master\n* hello\n\n### leave(channel)\nLeave a channel\n\n\tvar Discover = require('node-discover');\n\tvar d = Discover();\n\t\n\t//Pass the channel which we want to leave\n\tvar success = d.leave(\"config-updates\");\n\t\n\tif (!success) {\n\t\t//could leave channel; who cares?\n\t}\n\n### send(channel, objectToSend)\nSend a message/object on a specific channel\n\n\tvar Discover = require('node-discover');\n\tvar d = Discover();\n\t\n\tvar success = d.send(\"config-updates\", { redisMaster : \"10.0.1.4\" });\n\t\n\tif (!succes) {\n\t\t//could not send on that channel; probably because it is reserved\n\t}\n\n### advertise(objectToAdvertise)\nAdvertise an object or message with each hello packet; this is completely arbitrary. Make this\nobject/message whatever applies to your application that you want your nodes to know about the other\nnodes.\n\n\tvar Discover = require('node-discover');\n\tvar d = Discover();\n\t\n\td.advertise({\n\t\tlocalServices : [\n\t\t\t{ type : 'http', port : '9911', description : 'my awesome http server' },\n\t\t\t{ type : 'smtp', port : '25', description : 'smtp server' },\n\t\t]\n\t});\n\n\t//or\n\t\n\td.advertise(\"i love nodejs\");\n\t\n\t//or\n\t\n\td.advertise({ something : \"something\" });\n\t\t\n### start()\nStart broadcasting hello packets and checking for missing nodes (start is called automatically in the constructor)\n\n\tvar Discover = require('node-discover');\n\tvar d = Discover();\n\t\n\td.start();\n\n### stop()\nStop broadcasting hello packets and checking for missing nodes\n\n\tvar Discover = require('node-discover');\n\tvar d = Discover();\n\t\n\td.stop();\n\n### eachNode(fn) \nFor each node execute fn, passing fn the node fn(node)\n\n\tvar Discover = require('node-discover');\n\tvar d = Discover();\n\t\n\td.eachNode(function (node) {\n\t\tif (node.advertisement == \"i love nodejs\") {\n\t\t\tconsole.log(\"nodejs loves this node too\");\n\t\t}\n\t});\n\n  \nEvents\n-----------\n\nEach event is passed the `Node Object` for which the event is occuring.\n\n\n### promotion \nTriggered when the node has been promoted to a master.\n\n* Could happen by calling the promote() method\n* Could happen by the current master instance being demoted and this instance automatically being promoted\n* Could happen by the current master instance dying and this instance automatically being promoted\n\n### demotion \nTriggered when the node is no longer a master.\n\n* Could happen by calling the demote() method\n* Could happen by another node promoting itself to master\n\n### added \nTriggered when a new node is discovered\n\n### removed \nTriggered when a new node is not heard from within `nodeTimeout`\n\n### master \nTriggered when a new master has been selected\n\n\nNode Object\n-----------\n\n\t{ \n\t\tisMaster: true,\n\t\tisMasterEligible: true,\n\t\tadvertisement: null,\n\t\tlastSeen: 1317323922551,\n\t\taddress: '10.0.0.1',\n\t\tport: 12345,\n\t\tid: '31d39c91d4dfd7cdaa56738de8240bc4',\n\t\thostName : 'myMachine'\n\t}\n\nTODO\n====\n\nI have not tested large packets. The current version does not handle recombining\nsplit messages.\n\n\nLICENSE\n=======\n\n(MIT License)\n\nCopyright (c) 2011 Dan VerWeire dverweire@gmail.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "node-discover@0.0.14",
  "dist": {
    "shasum": "ef818c79f6fe1efe7dc9b242965a1ed41e0bb0f4"
  },
  "_from": "node-discover@0.0.14",
  "_resolved": "https://registry.npmjs.org/node-discover/-/node-discover-0.0.14.tgz"
}
